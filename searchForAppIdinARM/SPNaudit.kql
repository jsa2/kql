//*List for IP's need to be updated every now and then, this query is not meant to be running on schedule, but rather on hunting and investigations. The query is optimal for 0-24h lookups, as it is pretty resource intensive
// The list of IP's can be downladed here and then the download link updated on line 5 
// https://www.microsoft.com/en-us/Download/confirmation.aspx?id=56519
let azIp =externaldata(changeNumber: string, cloud: string, values: dynamic)
    ["https://download.microsoft.com/download/7/1/D/71D86715-5596-4529-9B13-DA13A5DE5B63/ServiceTags_Public_20240603.json"]
    with(format='multijson')
    | mv-expand values
    | project aId =values.id, prefix =values.properties.addressPrefixes
    | where aId == "AzureCloud"
    | summarize make_list(prefix);
let s = union AADServicePrincipalSignInLogs, AADManagedIdentitySignInLogs
    | distinct AppId, ServicePrincipalName
    | summarize make_list(bag_pack('AppId', AppId, 'ServicePrincipalName', ServicePrincipalName));
let src = union
// Storage logs in azure very often log private IP addresses
        Storage*,
        AzureDiagnostics,
        (AzureActivity
        | where ActivityStatusValue == "Success"),
        AppServiceConsoleLogs,
        MicrosoftGraphActivityLogs,
        AuditLogs
| project-away Time*
    | extend mass = pack_all(true)
    | mv-apply apps = toscalar(s) to typeof(dynamic) on (
        where mass contains apps.AppId
        | extend AppId = apps.AppId
        | extend ServicePrincipalName = apps.ServicePrincipalName
        | extend corr = coalesce(CorrelationId, ClientRequestId)
        | extend op = coalesce(OperationName, OperationNameValue, RequestUri, mass)
        ); 
src
| extend ipByAsIdentifiedByAzure= coalesce(IPAddress, CallerIPAddress, IPAddress, CallerIpAddress, 'no IP context identified')
| extend AzureCloudPublicIp =ipv4_is_in_any_range(ipByAsIdentifiedByAzure, toscalar (azIp))
| summarize AppIdSeenAt = make_set(strcat(Type, '-', op))
    by
    ipByAsIdentifiedByAzure,
    tostring(AppId),
    tostring(ServicePrincipalName),
    AzureCloudPublicIp
| extend location = geo_info_from_ip_address(ipByAsIdentifiedByAzure)
| evaluate bag_unpack(location) | project-away  latitude,longitude
